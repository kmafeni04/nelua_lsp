require 'lib.cjson'
require '.logger'
require '.json'

global response = @record{}

local function base_message(obj: *cJSON, request_id: number)
  cJSON_AddItemToObject(obj, "jsonrpc", cJSON_CreateString("2.0"))
  cJSON_AddItemToObject(obj, "id", cJSON_CreateNumber(request_id))
end

local function create_position(l: integer, c:integer): *cJSON
  local position = cJSON_CreateObject()

  local line = cJSON_CreateNumber(l)
  local character = cJSON_CreateNumber(c)

  cJSON_AddItemToObject(position, "line", line)
  cJSON_AddItemToObject(position, "character", character)

  return position
end

local function create_range(s_line: integer, s_char: integer, e_line: integer, e_char: integer): *cJSON
  local range = cJSON_CreateObject()

  local range_start = create_position(s_line, s_char)
  cJSON_AddItemToObject(range, "start", range_start)

  local range_end = create_position(e_line, e_char)
  cJSON_AddItemToObject(range, "end", range_end)

  return range
end

function response.initialize(request_id: number): string
  local initialize_response = cJSON_CreateObject()
  
  base_message(initialize_response, request_id)
  
  local result = cJSON_CreateObject()

  local capabilities = cJSON_CreateObject()

  local text_document_sync = cJSON_CreateNumber(1)
  cJSON_AddItemToObject(capabilities, "textDocumentSync", text_document_sync)

  local hover_provider = cJSON_CreateBool(1)
  cJSON_AddItemToObject(capabilities, "hoverProvider", hover_provider)

  local definition_provider = cJSON_CreateBool(1)
  cJSON_AddItemToObject(capabilities, "definitionProvider", definition_provider)

  local completion_provider = cJSON_CreateObject()

  local completion_trigger_chars = cJSON_CreateArray()
  cJSON_AddItemToArray(completion_trigger_chars, cJSON_CreateString("."))
  cJSON_AddItemToArray(completion_trigger_chars, cJSON_CreateString(":"))
  cJSON_AddItemToArray(completion_trigger_chars, cJSON_CreateString("@"))
  cJSON_AddItemToObject(completion_provider, "triggerCharacters", completion_trigger_chars)

  cJSON_AddItemToObject(capabilities, "completionProvider", completion_provider)

  cJSON_AddItemToObject(result, "capabilities", capabilities)
  
  local server_info = cJSON_CreateObject()
  cJSON_AddItemToObject(server_info, "name", cJSON_CreateString("nelua-lsp"))
  cJSON_AddItemToObject(server_info, "version", cJSON_CreateString("0.0.1"))
  cJSON_AddItemToObject(result, "serverInfo", server_info)
  
  cJSON_AddItemToObject(initialize_response, "result", result)
  
  local response = json.encode(initialize_response)
  cJSON_Delete(initialize_response)
  return response
end

function response.diagnostic(
  current_uri: string,
  line: integer,
  start_char: integer,
  end_char: integer,
  severity: integer,
  err: string,
  clear: facultative(boolean)
)
  local diagnostice_response = cJSON_CreateObject()
  cJSON_AddItemToObject(diagnostice_response, "jsonrpc", cJSON_CreateString("2.0"))

  local method = cJSON_CreateString("textDocument/publishDiagnostics")
  cJSON_AddItemToObject(diagnostice_response, "method", method)

  local params = cJSON_CreateObject()


  local uri = cJSON_CreateString(current_uri)
  cJSON_AddItemToObject(params, "uri", uri)

  local diagnostics = cJSON_CreateArray()

  if not clear then
    local diagnostic = cJSON_CreateObject()

    local range = create_range(line, start_char, line, end_char)
    cJSON_AddItemToObject(diagnostic, "range", range)

    local message = cJSON_CreateString(err)
    cJSON_AddItemToObject(diagnostic, "message", message)

    cJSON_AddItemToObject(diagnostic, "severity", cJSON_CreateNumber(severity))

    cJSON_AddItemToArray(diagnostics, diagnostic)
  end

  cJSON_AddItemToObject(params, "diagnostics", diagnostics)

  cJSON_AddItemToObject(diagnostice_response, "params", params)

  local response = json.encode(diagnostice_response)
  cJSON_Delete(diagnostice_response)
  return response
end

function response.hover(request_id: number, content: string): string
  local hover_response = cJSON_CreateObject()

  base_message(hover_response, request_id)

  local result = cJSON_CreateObject()

  local contents = cJSON_CreateString(content)
  cJSON_AddItemToObject(result, "contents", contents)

  cJSON_AddItemToObject(hover_response, "result", result)

  local response = json.encode(hover_response)
  cJSON_Delete(hover_response)
  return response
end

function response.definition(uris: sequence(string), s_lines: sequence(integer), s_chars: sequence(integer),e_lines: sequence(integer), e_chars: sequence(integer), request_id: integer): string
  local definition_response = cJSON_CreateObject()

  base_message(definition_response, request_id)
  local result = cJSON_CreateArray()

  for i, uri in ipairs(uris) do
    if uri ~= "file://" then
      local uri_obj = cJSON_CreateObject()
      
      local file_uri = cJSON_CreateString(uri)
      cJSON_AddItemToObject(uri_obj, "uri", file_uri)

      local range = create_range(s_lines[i], s_chars[i], e_lines[i], e_chars[i])
      cJSON_AddItemToObject(uri_obj, "range", range)

      cJSON_AddItemToArray(result, uri_obj)
    end
  end

  cJSON_AddItemToObject(definition_response, "result", result)

  local def_error = cJSON_CreateString("No definition found")
  cJSON_AddItemToObject(definition_response, "error", def_error)

  local response = json.encode(definition_response)
  cJSON_Delete(definition_response)
  return response
end


function response.completion(request_id: number, completions: sequence(*cJSON)): string
  local completion_response = cJSON_CreateObject()

  base_message(completion_response, request_id)
  local result = cJSON_CreateArray()

  for _, completion in ipairs(completions) do
    cJSON_AddItemToArray(result, completion)
  end

  cJSON_AddItemToObject(completion_response, "result", result)

  local response = json.encode(completion_response)
  cJSON_Delete(completion_response)
  return response
end

function response.shutdown()
  local shutdown_response = cJSON_CreateObject()
  local result = cJSON_CreateNull()
  cJSON_AddItemToObject(shutdown_response, "result", result)

  local response = json.encode(shutdown_response)
  cJSON_Delete(shutdown_response)
  return response
end
