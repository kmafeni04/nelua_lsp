require 'io'
require 'os'

require 'src.rpc'
require 'src.response'

## if DEBUG then
	do
	  local log_file = io.open("lsp.log", "w")
	  local date = os.date("%Y/%m/%d", os.time())
	  local time = os.date("%X", os.time())
	  local logged_file = #[debug.getinfo(1).source]#
	  local line = #[debug.getinfo(1).currentline]#
	  assert(log_file):write(("[lua_lsp] " .. date .. " " .. time .. "  " .. logged_file .. ":" .. line .. ":" .. " Started\n"))
	  assert(log_file):close()
	end

	local function log(msg: string) 
	  local log_file = io.open("lsp.log", "a")
	  local date = os.date("%Y/%m/%d", os.time())
	  local time = os.date("%X", os.time())
	  local logged_file = #[debug.getinfo(1).source]#
	  local line = #[debug.getinfo(1).currentline]#
	  assert(log_file):write(("[lua_lsp] " .. date .. " " .. time .. "  " .. logged_file .. ":" .. line .. ": " .. msg .. "\n"))
	  assert(log_file):close()
	end
## else
	local function log(msg: string) end
## end

local stdin: string

while true do
	stdin = stdin .. io.read(1)
	
	local request, content_len, err = rpc.decode(stdin)
	if err == "" then
		local request_method_obj = cJSON_GetObjectItem(request, "method") 
		local request_method = request_method_obj.valuestring
		local request_id_obj = cJSON_GetObjectItem(request, "id") 
		local request_id: integer
		if cJSON_IsNumber(request_id_obj) == 1 then
			request_id = request_id_obj.valueint
		end
		local request_params = cJSON_GetObjectItem(request, "params") 

		log("Method: " .. request_method)

		if request_method == "initialize" then
			io.write(response.initialize(request_id))
			io.flush()
		end

		if request_method == "textDocument/hover" then
			local response = response.hover(request_id)
			io.write(response)
			io.flush()
		end

		if request_method == "textDocument/definition" then
			local request_position = cJSON_GetObjectItem(request_params , "position") 
			local position_line = cJSON_GetObjectItem(request_position, "line") 
			local position_character = cJSON_GetObjectItem(request_position, "charachter") 
			local current_line: integer
			local current_character: integer
			if cJSON_IsNumber(position_line) == 1 then
				current_line = position_line.valueint
			end
			if cJSON_IsNumber(position_character) == 1 then
				current_character = position_character.valueint
			end

			local root_uri_prog = io.popen("git rev-parse --show-toplevel")
			local root_uri: string = root_uri_prog:read()
			if root_uri:match("[/]") then
			end

			local request_textDocument = cJSON_GetObjectItem(request_params , "textDocument") 
			local textDocument_uri = cJSON_GetObjectItem(request_textDocument , "uri") 
 			local current_file_uri: string
			if cJSON_IsString(textDocument_uri) == 1 then
				current_file_uri = textDocument_uri.valuestring
			end

			local go_to_definition: string
			local go_to_file: string = "file://"
			local _, current_file_path = current_file_uri:match("^%.?(%S+)://(.+)$")
			local file_to_read = io.open(current_file_path[2], "r")
			if file_to_read:isopen() then
				log("File was opened")
				local line_num = 0
				for line in file_to_read:lines() do
					if line_num == current_line then
						if line:match('require') then
							local root_require_matched, root_require_seq = line:match("^.*require ['\"](%w+%.*%w*)['\"]$")
							local same_require_matched, same_require_seq = line:match("^.*require ['\"]%.(%w+%.*%w*)['\"]$")
							if root_require_matched then
								local require_path = root_require_seq[1]:gsub("%.","/") .. ".nelua"
								local git_paths = io.popen("git ls-files")
								for path in git_paths:lines() do
									if path == require_path then
										go_to_file = go_to_file .. root_uri .. "/" .. require_path
										log(go_to_file)
										go_to_definition = response.definition(go_to_file, request_id) 
									end
								end
							end
							if same_require_matched then
								local _, current_dir_seq = current_file_uri:match("^file://(.*)/[^/]+%.nelua$") 
								local uri_sub = current_dir_seq[1]:sub(#root_uri + 1):sub(2)
								local require_path = uri_sub .. "/" .. same_require_seq[1]:gsub("%.","/") .. ".nelua"
								log(require_path)
								local git_paths = io.popen("git ls-files")
								for path in git_paths:lines() do
									if path == require_path then
										go_to_file = go_to_file .. root_uri .. "/" .. require_path
										log(go_to_file)
										go_to_definition = response.definition(go_to_file, request_id) 
									end
								end
							end
						end
					end
					line_num = line_num + 1
				end
				file_to_read:close()
			else
				log("File wasn't opened")
			end
			
			io.write(go_to_definition)
			io.flush()
		end

		if request_method == "textDocument/completion" then
			local response = response.completion(request_id) 
			io.write(response)
			io.flush()
		end
	
		if request_method == "shutdown" then
			cJSON_Delete(request)
			os.exit()
		end

		cJSON_Delete(request)
		stdin = ""
	end
end
