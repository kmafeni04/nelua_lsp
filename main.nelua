require 'io'
require 'os'
require 'string'
require 'iterators'

require 'server'
require 'lib.cjson'
require 'utils.json'
require 'utils.response'
require 'utils.logger'

logger.init()

local stdin: stringbuilder
local documents: hashmap(string, string)
local current_file: string
local current_uri: string

local root_uri_prog = io.popen("git rev-parse --show-toplevel")
local root_uri: string = root_uri_prog:read()


while true do
	local header = io.read("l")
	local std: integer

	local header_match, header_seq = header:match(":%s(%d+)")
	if header_match then
		local content_length = tointeger(header_seq[1])
		io.read("l")
		stdin:writef("%s", io.read(content_length))
	end
	
	local request, err = json.decode(stdin:promote())
	if err == "" then
		local request_method_obj = cJSON_GetObjectItem(request, "method") 
		local request_method = request_method_obj.valuestring
		local request_id_obj = cJSON_GetObjectItem(request, "id") 
		local request_id: integer
		if cJSON_IsNumber(request_id_obj) == 1 then
			request_id = request_id_obj.valueint
		end
		local request_params = cJSON_GetObjectItem(request, "params") 
		local request_text_document = cJSON_GetObjectItem(request_params , "textDocument") 
		local text_document_uri = cJSON_GetObjectItem(request_text_document, "uri") 
		if cJSON_IsString(text_document_uri) == 1 then
			current_uri = text_document_uri.valuestring
		end
		local request_position = cJSON_GetObjectItem(request_params , "position") 
		local current_line_obj = cJSON_GetObjectItem(request_position, "line") 
		local current_line: integer
		if cJSON_IsNumber(current_line_obj) == 1 then
			current_line = current_line_obj.valueint
		end
		local current_char_obj = cJSON_GetObjectItem(request_position, "character") 
		local current_char: integer
		if cJSON_IsNumber(current_char_obj) == 1 then
			current_char = current_char_obj.valueint
		end
		local current_file_path = current_uri:sub(#("file://") + #root_uri + 2)

		logger.log("Method: " .. request_method)

		if request_method == "initialize" then
			server.initialize(request_id)
		end

		if request_method == "textDocument/didOpen" then
			current_file = server.did_open(current_file_path)
			documents[current_uri] = current_file
		end

		if request_method == "textDocument/didClose" then
			server.did_close(documents, current_uri)
		end

		if request_method == "textDocument/didChange" then
			current_file = server.did_change(documents, request_params, current_uri)
			documents[current_uri] = current_file
		end

		if request_method == "textDocument/hover" then
			server.hover(
				request_id,
				current_file_path,
				current_file,
				current_line,
				current_char
			)
		end

		if request_method == "textDocument/definition" then
			server.go_to_definition(
				root_uri,
				request_params,
				request_id,
				documents,
				current_uri,
				current_file,
				current_line,
				current_char
			)
		end

		if request_method == "textDocument/completion" then
			server.completion(request_id)
		end
	
		if request_method == "shutdown" then
			server.shutdown()
		end

		if request_method == "exit" then
			server.exit()
		end
	end
end
