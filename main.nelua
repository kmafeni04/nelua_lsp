require 'io'
require 'os'

require 'src.rpc'
require 'src.response'

do
  local log_file = io.open("lsp.log", "w")
  local date = os.date("%Y/%m/%d", os.time())
  local time = os.date("%X", os.time())
  local logged_file = #[debug.getinfo(1).source]#
  local line = #[debug.getinfo(1).currentline]#
  assert(log_file):write(("[lua_lsp] "..date .. " " .. time .. " ".. " " .. logged_file .. ":" .. line .. ":" .. " Started\n"))
  assert(log_file):close()
end

local function log(msg: string) 
  local log_file = io.open("lsp.log", "a")
  local date = os.date("%Y/%m/%d", os.time())
  local time = os.date("%X", os.time())
  local logged_file = #[debug.getinfo(1).source]#
  local line = #[debug.getinfo(1).currentline]#
  assert(log_file):write(("[lua_lsp] "..date .. " " .. time .. " ".. " " .. logged_file .. ":" .. line .. ": " .. msg .. "\n"))
  assert(log_file):close()
end

local stdin: string

while true do
	stdin = stdin .. io.read(1)
	
	local request, content_len, err = rpc.decode(stdin)
	if err == "" then
		local request_method_obj = cJSON_GetObjectItem(request, "method") 
		local request_method = request_method_obj.valuestring
		local request_id_obj = cJSON_GetObjectItem(request, "id") 
		local request_id 
		if cJSON_IsNumber(request_id_obj) == 1 then
			request_id = request_id_obj.valueint
		end

		log("Method: " .. request_method)

		if request_method == "initialize" then
			io.write(response.initialize(request_id))
			io.flush()
		end

		if request_method == "textDocument/hover" then
			io.write(response.hover(request_id))
			io.flush()
		end
	
		if request_method == "shutdown" then
			cJSON_Delete(request)
			os.exit()
		end

		cJSON_Delete(request)
		stdin = ""
	end
end
