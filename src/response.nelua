require '.rpc'

global response = @record{}

local function base_message(obj: *cJSON, request_id: number)
  cJSON_AddItemToObject(obj, "jsonrpc", cJSON_CreateString("2.0"))
  cJSON_AddItemToObject(obj, "id", cJSON_CreateNumber(request_id))
end

local function create_position(l: integer, c:integer): *cJSON
  local position = cJSON_CreateObject()

  local line = cJSON_CreateNumber(l)
  local character = cJSON_CreateNumber(c)

  cJSON_AddItemToObject(position, "line", line)
  cJSON_AddItemToObject(position, "character", character)

  return position
end

local function create_range(s_line: integer, s_char: integer, e_line: integer, e_char: integer): *cJSON
  local range = cJSON_CreateObject()

  local range_start = create_position(s_line, s_char)
  local range_end = create_position(e_line, e_char)

  cJSON_AddItemToObject(range, "start", range_start)
  cJSON_AddItemToObject(range, "end", range_end)

  return range
end



function response.initialize(request_id: number): string
  local initialize_response = cJSON_CreateObject()
  
  base_message(initialize_response, request_id)
  
  local result = cJSON_CreateObject()

  local capabilities = cJSON_CreateObject()

  local hover_provider = cJSON_CreateBool(1)
  cJSON_AddItemToObject(capabilities, "hoverProvider", hover_provider)

  local definition_provider = cJSON_CreateBool(1)
  cJSON_AddItemToObject(capabilities, "definitionProvider", definition_provider)

  cJSON_AddItemToObject(result, "capabilities", capabilities)
  
  local server_info = cJSON_CreateObject()
  cJSON_AddItemToObject(server_info, "name", cJSON_CreateString("nelua-lsp"))
  cJSON_AddItemToObject(server_info, "version", cJSON_CreateString("0.0.1"))
  cJSON_AddItemToObject(result, "serverInfo", server_info)
  
  cJSON_AddItemToObject(initialize_response, "result", result)
  
  local response = rpc.encode(initialize_response)
  cJSON_Delete(initialize_response)
  return response
end

function response.hover(request_id: number): string
  local hover_response = cJSON_CreateObject()

  base_message(hover_response, request_id)

  local result = cJSON_CreateObject()

  local contents = cJSON_CreateString("hello")
  cJSON_AddItemToObject(result, "contents", contents)

  cJSON_AddItemToObject(hover_response, "result", result)

  local response = rpc.encode(hover_response)
  cJSON_Delete(hover_response)
  return response
end

function response.definition(uri: string, request_id: number): string
  local definition_response = cJSON_CreateObject()

  base_message(definition_response, request_id)
  local result = cJSON_CreateObject()
 
  local file_uri = cJSON_CreateString(uri)
  local range = create_range(0, 0, 0, 0)

  cJSON_AddItemToObject(result, "uri", file_uri)
  cJSON_AddItemToObject(result, "range", range)

  cJSON_AddItemToObject(definition_response, "result", result)

  local response = rpc.encode(definition_response)
  cJSON_Delete(definition_response)
  return response
end
