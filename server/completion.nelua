require 'io'

require 'utils.response'

local CompletionItemKind = @enum{
	Text = 1,
	Method,
	Function,
	Constructor,
	Field,
	Variable,
	Class,
	Interface,
	Module,
	Property,
	Unit,
	Value,
	Enum,
	Keyword,
	Snippet,
	Color,
	File,
	Reference,
	Folder,
	EnumMember,
	Constant,
	Struct,
	Event,
	Operator,
	TypeParameter,
}

local InsertTextFormat = @enum{
  PlainText = 1,
  Snippet
}

local Command = @record{
	title: string,
	command: string,
}

local function create_completion(doc: string, label: string, insert_t: string, insert_t_f: integer, comp_kind: integer): *cJSON
  local obj = cJSON_CreateObject()
  cJSON_AddItemToObject(obj, "documentation", cJSON_CreateString(doc))
  cJSON_AddItemToObject(obj, "label", cJSON_CreateString(label))
  cJSON_AddItemToObject(obj, "insertText", cJSON_CreateString(insert_t))
  cJSON_AddItemToObject(obj, "insertTextFormat", cJSON_CreateNumber(insert_t_f))
  cJSON_AddItemToObject(obj, "insertTextFormat", cJSON_CreateNumber(insert_t_f))
  cJSON_AddItemToObject(obj, "kind", cJSON_CreateNumber(comp_kind))
  return obj
end

local function completion(request_id: integer, current_file: string)
	local completions: sequence(*cJSON)
-------------- Keywords ---------------
  local keyword_global = create_completion("", "global", "global", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_global)

  local keyword_local = create_completion("", "local", "local", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_local)

  local keyword_nil = create_completion("", "nil", "nil", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_nil)

  local keyword_nilptr = create_completion("", "nilptr", "nilptr", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_nilptr)

  local keyword_true = create_completion("", "true", "true", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_true)

  local keyword_false = create_completion("", "false", "false", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_false)

  local keyword_continue= create_completion("", "continue", "continue", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_continue)

  local keyword_fallthrough = create_completion("", "fallthrough", "fallthrough", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_fallthrough)

  local keyword_break = create_completion("", "break", "break", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_break)

  local keyword_goto = create_completion("", "goto", "goto", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_goto)

  local keyword_return = create_completion("", "return", "return", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_return)
---------------------------------------

----------- Global Variables ----------
  local global_var_version = create_completion(
		[[A string containing the running Nelua version, such as `"Nelua 0.2-dev"`.]],
		"_VERSION",
		"_VERSION",
		InsertTextFormat.PlainText,
		CompletionItemKind.Variable
	)
	completions:push(global_var_version)

  local global_var_arg = create_completion([[
```nelua
global arg: sequence(string, GeneralAllocator)
```

Sequence of command line arguments.

The value at index `0` is usually filled with the program executable name. The values starting from index `1` up to `#arg` contains each command line argument.
]], "arg", "arg", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(global_var_arg)
---------------------------------------

----------- Primitive Types ----------- 
  local primitive_type_boolean = create_completion("", "boolean", "boolean", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_boolean)

  local primitive_type_number = create_completion("", "number", "number", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_number)

  local primitive_type_integer = create_completion("", "integer", "integer", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_integer)

  local primitive_type_uinteger = create_completion("", "uinteger", "uinteger", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uinteger)

  local primitive_type_byte = create_completion("", "byte", "byte", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_byte)

  local primitive_type_isize = create_completion("", "isize", "isize", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_isize)

  local primitive_type_int8 = create_completion("", "int8", "int8", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int8)

  local primitive_type_int16 = create_completion("", "int16", "int16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int16)

  local primitive_type_int16 = create_completion("", "int16", "int16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int16)

  local primitive_type_int32 = create_completion("", "int32", "int32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int32)

  local primitive_type_int64 = create_completion("", "int64", "int64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int64)

  local primitive_type_int128 = create_completion(
		"Only supported by some C compilers and architectures",
		"int128",
		"int128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_int128)

  local primitive_type_usize = create_completion("", "usize", "usize", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_usize)

  local primitive_type_uint8 = create_completion("", "uint8", "uint8", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint8)
	
  local primitive_type_uint16 = create_completion("", "uint16", "uint16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint16)

  local primitive_type_uint32 = create_completion("", "uint32", "uint32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint32)

  local primitive_type_uint64 = create_completion("", "uint64", "uint64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint64)

  local primitive_type_uint128 = create_completion(
		"Only supported by some C compilers and architectures",
		"uint128",
		"uint128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_uint128)

  local primitive_type_float32 = create_completion("", "float32", "float32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_float32)

  local primitive_type_float64 = create_completion("", "float64", "float64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_float64)

  local primitive_type_float128 = create_completion(
		"Only supported by some C compilers and architectures",
		"float128",
		"float128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_float128)

  local primitive_type_string = create_completion("", "string", "string", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_string)

  local primitive_type_stringbuilder = create_completion(
		"",
		"stringbuilder",
		"stringbuilder",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_stringbuilder)

  local primitive_type_record = create_completion("", "record", "record", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_record)

  local primitive_type_enum = create_completion("", "enum", "enum", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_enum)

  local primitive_type_union = create_completion("", "union", "union", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_union)

  local primitive_type_pointer = create_completion("", "pointer", "pointer", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_pointer)
	
  local primitive_type_func = create_completion("", "function", "function($1): $2", InsertTextFormat.Snippet, CompletionItemKind.Class)
	completions:push(primitive_type_func)

  local primitive_type_span = create_completion("", "span", "span(${1:type})", InsertTextFormat.Snippet, CompletionItemKind.Class)
	completions:push(primitive_type_span)

  local primitive_type_void = create_completion("", "void", "void", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_void)

  local primitive_type_type = create_completion("", "type", "type", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_type)

  local primitive_type_varargs = create_completion("", "varargs", "varargs", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_varargs)

  local primitive_type_io = create_completion("", "io", "io", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_io)
---------------------------------------

---------- Builtin functions ----------
  local builtin_func_require = create_completion([[
```nelua
global function require(modname: string <comptime>)
```
Loads the given module `modname`.

The function starts by looking into loaded modules to determine whether `modname` is already loaded. If it is then require does nothing, otherwise it tries to load the module.

If there is any error loading the module, then the compilation fails. If there is any error running the module, then the application terminates.
]], "require(modname)", "require", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_require)

  local builtin_func_print = create_completion([[
```nelua
global function print(...: varargs): void
```

Receives any number of arguments and prints their values to the standard output, converting each argument to a string following the same rules of `tostring`. The values are separated by tabs and a new line is always appended.

The function `print` is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use `io.write` or `io.writef`.
panic
]], "print(...)", "print", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_print)

  local builtin_func_panic = create_completion([[
```nelua
global function panic(message: string): void
```

Terminate the application abnormally with message `message`. This function never returns.

Use to raise unrecoverable errors.
]], "panic(message)", "panic", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_panic)

  local builtin_func_error = create_completion([[
```nelua
global function error(message: string): void
```

Raises an error with message `message`. This function never returns.

Currently this is an alias to `panic` and terminates the application, but in the future, in case the language get an exception system, it may be changed to an exception being thrown.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by enabling the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "error(message)", "error", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_error)

  local builtin_func_assert = create_completion([[
```nelua
global function assert(v: auto, message: facultative(string))
```

Raises an error if the value `v` is evaluated to `false`, otherwise, returns `v`. In case of error, `message` is the error message, when absent defaults to `"assertion failed!"`.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by using the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "assert(v, message)", "assert", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_assert)

  local builtin_func_check = create_completion([[
```nelua
global function check(cond: boolean, message: facultative(string)): void
```

If `cond` is true it does nothing, otherwise raises an error with `message` and terminates the application. Similar to `assert` however it’s completely omitted when compiling in release mode or with pragma `nochecks`. Use for assertive programming, to check if conditions are met without impacting performance of production code.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by using the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "check(cond, message)", "check", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_check)

  local builtin_func_likely = create_completion([[
```nelua
global function likely(cond: boolean): boolean
```

Returns `cond`. This is a branching prediction utility, expecting `cond` to evaluate to `true`.
]], "likely(cond)", "likely", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_likely)

  local builtin_func_unlikely = create_completion([[
```nelua
global function unlikely(cond: boolean): boolean
```

Returns `cond`. This is a branching prediction utility, expecting `cond` to evaluate to `false`.
]], "unlikely(cond)", "unlikely", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_unlikely)

  local builtin_func_ipairs = create_completion([[
```nelua
global function ipairs(a: container_reference_concept): (auto, auto, integer)
```

Returns values so that the construction

```nelua
for i,v in ipairs(a) do body end
```

will iterate over the index–value pairs of `a` from its first element up to the last. Where `i` is an integer determining the index of the element, and `v` its respective value.

The container `a` must be contiguous, such as `array`, `span`, `vector` or `sequence`.
]], "ipairs(a)", "ipairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_ipairs)

  local builtin_func_mipairs = create_completion([[
```nelua
global function mipairs(a: container_reference_concept): (auto, auto, integer)
```

Like `ipairs` but yields reference to elements values so that you can modify them in-place.
]], "mipairs(a)", "mipairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mipairs)

  local builtin_func_next = create_completion([[
```nelua
global function next(a: container_reference_concept, k: auto): (auto, auto, auto)
```

Gets the next element after key `k` for the container `a`.

In case of success returns `true` plus the next element key and the next element value. Otherwise returns `false` plus a zeroed key and value.

The container `a` must either have the metamethod `__next` or be a contiguous.
]], "next(a, k)", "next", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_next)

  local builtin_func_mnext = create_completion([[
```nelua
global function mnext(a: container_reference_concept, k: auto): (auto, auto, auto)
```

Like `next` but returns reference to the next element value, so that you can modify it in-place.
]], "mnext(a, k)", "mnext", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mnext)

  local builtin_func_pairs = create_completion([[
```nelua
global function pairs(a: container_reference_concept): (auto, auto, auto)
```

Returns values so that the construction

```nelua
for k,v in pairs(a) do body end
```

will iterate over all the key–value pairs of `a`. Where `k` is a key determining the location of the element, and `v` its respective value.

The container `a` must either have the metamethod `__pairs` or be a contiguous. Should work on any container, such as `array`, `span`, `vector`, `sequence` or `hashmap`.
]], "pairs(a)", "pairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_pairs)

  local builtin_func_mpairs = create_completion([[
```nelua
global function mpairs(a: container_reference_concept): (auto, auto, auto)
```

Like `pairs` but yields reference to elements values so that you can modify them in-place.
]], "mpairs(a)", "mpairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mpairs)

  local builtin_func_select = create_completion([[
```nelua
global function select(index: auto <comptime>, ...: varargs)
```

If `index` is a number, returns all arguments after argument number index; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string ‘#’, and select returns the total number of extra arguments it received.
]], "select(a, k)", "select", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_select)
---------------------------------------

-- TODO: Finish IO completions
----------------- Io ------------------
  local io_stderr = create_completion([[
```nelua
global io.stderr: filestream
```

Default error output file handle.
]], "io.stderr", "io.stderr", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stderr)

  local io_stdout = create_completion([[
```nelua
global io.stdout: filestream
```

Default output file handle.
]], "io.stdout", "io.stdout", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stdout)

  local io_stdin = create_completion([[
```nelua
global io.stdin: filestream
```

Default input file handle.
]], "io.stdin", "io.stdin", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stdin)

  local io_open = create_completion([[
```nelua
function io.open(filename: string, mode: facultative(string)) : (filestream, string, integer)
```

Opens a file, in the `mode` specified in the string mode. In case of success, it returns an open file.

Equivalent to `filestream:open(filename, mode)`.
]], "io.open(filename, mode?)", "io.open", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_open)

  local io_popen = create_completion([[
```nelua
function io.popen(prog: string, mode: facultative(string)) : (filestream, string, integer)
```

Starts the program `prog` in a separated process and returns a file handle that you can use to read data from this program (if `mode` is “r”, the default) or to write data to this program (if `mode` is “w”). This function is system dependent and is not available on all platforms.
]], "io.popen(prog, mode?)", "io.popen", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_popen)

  local io_close = create_completion([[
```nelua
function io.close(file: facultative(filestream)): (boolean, string, integer)
```

Closes a `file`. Without a file, closes the default output file.

Equivalent to `file:close()`.
]], "io.close(file?)", "io.close", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_close)

  local io_flush = create_completion([[
```nelua
function io.flush(file: facultative(filestream)): (boolean, string, integer)
```

flushs a `file`. Without a file, flushs the default output file.

Equivalent to `file:flush()`.
]], "io.flush(file?)", "io.flush", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_flush)

  local io_input = create_completion([[
```nelua
function io.input(file: overload(string,filestream,niltype)): filestream
```

When called with a file name, it opens the named `file` (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without arguments, it returns the current default input file.

In case of errors this function raises the error, instead of returning an error code.
]], "io.input(file?)", "io.input", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_input)

  local io_output = create_completion([[
```nelua
function io.output(file: overload(string,filestream,niltype)): filestream
```

Similar to io.input, but operates over the default output file.
]], "io.output(file?)", "io.output", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_output)

  local io_tmpfile = create_completion([[
```nelua
function io.tmpfile(): (filestream, string, integer)
```

In case of success, returns an open handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.
]], "io.tmpfile()", "io.tmpfile", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_tmpfile)

  local io_read = create_completion([[
```nelua
function io.read(fmt: overload(integer,string,niltype)): (string, string, integer)
```

Read from default input, according to the given format.

Equivalent to `io.input():read(fmt)`.
]], "io.read(fmt?)", "io.read", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_read)

  local io_write = create_completion([[
```nelua
function io.write(...: varargs): (boolean, string, integer)
```

Writes the value of each of its arguments to the standard output. The arguments must be strings or numbers. In case of success, this function returns `true`.

Equivalent to `io.output():write(...)`.
]], "io.write(...)", "io.write", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_write)

  local io_writef = create_completion([[
```nelua
function io.writef(fmt: string, ...: varargs): (boolean, string, integer)
```

Writes formatted values to the standard output, according to the given format. In case of success, this function returns `true`.

Equivalent to `io.output():writef(fmt, ...)`.
]], "io.writef(fmt, ...)", "io.writef", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_writef)

  local io_writef = create_completion([[
```nelua
function io.writef(fmt: string, ...: varargs): (boolean, string, integer)
```

Writes formatted values to the standard output, according to the given format. In case of success, this function returns `true`.

Equivalent to `io.output():writef(fmt, ...)`.
]], "io.writef(fmt, ...)", "io.writef", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_writef)

  local io_printf = create_completion([[
```nelua
function io.printf(...: varargs): void
```

Like io.writef but also flushes the standard output.
]], "io.printf(...)", "io.printf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_printf)

  local io_print = create_completion([[
```nelua
function io.print(...: varargs): void
```

Like print, but writes to io.stdout using io.write.
]], "io.print(...)", "io.print", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_print)

  local io_type = create_completion([[
```nelua
function io.type(obj: auto): auto
```

Checks whether `obj` is a valid file handle. Returns the string `"file"` if `obj` is an open file handle, `"closed file"` if `obj` is a closed file handle, or `nil` if `obj` is not a file handle.
]], "io.type(obj)", "io.type", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_type)

  local io_lines = create_completion([[
```nelua
function io.lines(filename: facultative(string), fmt: overload(integer,string,niltype))
```

Opens the given file name in read mode and returns an iterator function that works like `file:lines(...)` over the opened file.

The call `io.lines()` (with no file name) is equivalent to `io.input():lines("l")`, that is, it iterates over the lines of the default input file.

It currently never closes the file when the iteration finishes. In case of errors opening the file, this function raises the error, instead of returning an error code.
]], "io.lines(filename?, fmt?)", "io.lines", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_lines)
---------------------------------------

-------------- Snippets ---------------
  local snippet_if = create_completion("", "if .. then", "if $1 then\n\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_if)

  local snippet_elseif = create_completion("", "elseif .. then", "elseif $1 then", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_elseif)

  local snippet_while = create_completion("", "while .. do", "while $1 do\n\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_while)

  local snippet_do = create_completion("", "do .. end", "do \n$1\n end", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_do)

  local snippet_switch = create_completion("", "switch .. end", "switch $1 do\n\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_switch)

  local snippet_case = create_completion("", "case .. then", "case $1 then", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_case)

  local snippet_defer = create_completion("", "defer .. end", "defer \n$1\n end", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_defer)

  local snippet_repeat = create_completion("", "repeat .. until", "repeat\n\nuntil $1", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_repeat)

  local snippet_forin_generic = create_completion(
		"", 
		"for .. func", 
		"for ${1:value} in ${2:func()} do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_generic)

  local snippet_forin_pairs = create_completion(
		"", 
		"for .. pairs", 
		"for ${1:key}, ${2:value} in pairs(${3:a}) do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_pairs)

  local snippet_forin_mpairs = create_completion(
		"", 
		"for .. mpairs", 
		"for ${1:key}, ${2:value} in mpairs(${3:a}) do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_mpairs)

  local snippet_forin_ipairs = create_completion(
		"", 
		"for .. ipairs", 
		"for ${1:index}, ${2:value} in ipairs(${3:a}) do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_ipairs)

  local snippet_forin_mipairs = create_completion(
		"", 
		"for .. mipairs", 
		"for ${1:index}, ${2:value} in mipairs(${3:a}) do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_mipairs)

  local snippet_forn = create_completion(
		"", 
		"for i = ..", 
		"for ${1:i} = ${2:1}, ${3:10} do\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forn)

	local snippet_localfunc = create_completion(
		"", 
		"local function", 
		"local function $1()\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_localfunc)

	local snippet_globalfunc = create_completion(
		"", 
		"global function", 
		"global function $1()\n\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_globalfunc)

---------------------------------------

------------ Generic Text -------------
	local identifiers: sequence(string)
	for line in current_file:gmatch("[^\n]-\n") do
		for identifier in line:gmatch("%f[%w_]([%w_]+)%f[^%w_]") do
			identifiers:push(identifier)
		end
	end

	local seen_identifiers: hashmap(string, boolean)
	local unique_identifiers: sequence(string)
	for _, identifier  in ipairs(identifiers) do
		if not seen_identifiers[identifier] then
			unique_identifiers:push(identifier)
			seen_identifiers[identifier] = true
		end
	end

	for _, identifier in ipairs(unique_identifiers) do
		local text = create_completion("", identifier, identifier, InsertTextFormat.PlainText, CompletionItemKind.Text)
		completions:push(text)
	end
---------------------------------------

	local completion_response = response.completion(request_id, completions)
	io.write(completion_response)
	io.flush()
end

return completion
