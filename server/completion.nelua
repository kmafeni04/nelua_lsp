require 'io'

require 'utils.response'

local keywords = require 'utils.keywords'

local CompletionItemKind = @enum{
	Text = 1,
	Method,
	Function,
	Constructor,
	Field,
	Variable,
	Class,
	Interface,
	Module,
	Property,
	Unit,
	Value,
	Enum,
	Keyword,
	Snippet,
	Color,
	File,
	Reference,
	Folder,
	EnumMember,
	Constant,
	Struct,
	Event,
	Operator,
	TypeParameter,
}

local InsertTextFormat = @enum{
  PlainText = 1,
  Snippet
}

local Command = @record{
	title: string,
	command: string,
}

local function create_completion(doc: string, label: string, insert_t: string, insert_t_f: integer, comp_kind: integer): *cJSON
  local obj = cJSON_CreateObject()
  cJSON_AddItemToObject(obj, "documentation", cJSON_CreateString(doc))
  cJSON_AddItemToObject(obj, "label", cJSON_CreateString(label))
  cJSON_AddItemToObject(obj, "insertText", cJSON_CreateString(insert_t))
  cJSON_AddItemToObject(obj, "insertTextFormat", cJSON_CreateNumber(insert_t_f))
  cJSON_AddItemToObject(obj, "insertTextFormat", cJSON_CreateNumber(insert_t_f))
  cJSON_AddItemToObject(obj, "kind", cJSON_CreateNumber(comp_kind))
  return obj
end

local function completion(request_id: integer, documents: hashmap(string, string))
	local completions: sequence(*cJSON)
-------------- Keywords ---------------
  local keyword_global = create_completion("", "global", "global", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_global)

  local keyword_local = create_completion("", "local", "local", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_local)

  local keyword_nil = create_completion("", "nil", "nil", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_nil)

  local keyword_nilptr = create_completion("", "nilptr", "nilptr", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_nilptr)

  local keyword_true = create_completion("", "true", "true", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_true)

  local keyword_false = create_completion("", "false", "false", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_false)

  local keyword_continue= create_completion("", "continue", "continue", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_continue)

  local keyword_fallthrough = create_completion("", "fallthrough", "fallthrough", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_fallthrough)

  local keyword_break = create_completion("", "break", "break", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_break)

  local keyword_goto = create_completion("", "goto", "goto", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_goto)

  local keyword_return = create_completion("", "return", "return", InsertTextFormat.PlainText, CompletionItemKind.Keyword)
	completions:push(keyword_return)
---------------------------------------

----------- Global Variables ----------
  local global_var_version = create_completion(
		[[A string containing the running Nelua version, such as `"Nelua 0.2-dev"`.]],
		"_VERSION",
		"_VERSION",
		InsertTextFormat.PlainText,
		CompletionItemKind.Variable
	)
	completions:push(global_var_version)

  local global_var_arg = create_completion([[
```nelua
global arg: sequence(string, GeneralAllocator)
```

Sequence of command line arguments.

The value at index `0` is usually filled with the program executable name. The values starting from index `1` up to `#arg` contains each command line argument.
]], "arg", "arg", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(global_var_arg)
---------------------------------------

----------- Primitive Types ----------- 
  local primitive_type_boolean = create_completion("", "boolean", "boolean", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_boolean)

  local primitive_type_number = create_completion("", "number", "number", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_number)

  local primitive_type_integer = create_completion("", "integer", "integer", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_integer)

  local primitive_type_uinteger = create_completion("", "uinteger", "uinteger", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uinteger)

  local primitive_type_byte = create_completion("", "byte", "byte", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_byte)

  local primitive_type_isize = create_completion("", "isize", "isize", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_isize)

  local primitive_type_int8 = create_completion("", "int8", "int8", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int8)

  local primitive_type_int16 = create_completion("", "int16", "int16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int16)

  local primitive_type_int16 = create_completion("", "int16", "int16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int16)

  local primitive_type_int32 = create_completion("", "int32", "int32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int32)

  local primitive_type_int64 = create_completion("", "int64", "int64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_int64)

  local primitive_type_int128 = create_completion(
		"Only supported by some C compilers and architectures",
		"int128",
		"int128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_int128)

  local primitive_type_usize = create_completion("", "usize", "usize", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_usize)

  local primitive_type_uint8 = create_completion("", "uint8", "uint8", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint8)
	
  local primitive_type_uint16 = create_completion("", "uint16", "uint16", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint16)

  local primitive_type_uint32 = create_completion("", "uint32", "uint32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint32)

  local primitive_type_uint64 = create_completion("", "uint64", "uint64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_uint64)

  local primitive_type_uint128 = create_completion(
		"Only supported by some C compilers and architectures",
		"uint128",
		"uint128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_uint128)

  local primitive_type_float32 = create_completion("", "float32", "float32", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_float32)

  local primitive_type_float64 = create_completion("", "float64", "float64", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_float64)

  local primitive_type_float128 = create_completion(
		"Only supported by some C compilers and architectures",
		"float128",
		"float128",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_float128)

  local primitive_type_string = create_completion("", "string", "string", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_string)

  local primitive_type_stringbuilder = create_completion(
		"",
		"stringbuilder",
		"stringbuilder",
		InsertTextFormat.PlainText,
		CompletionItemKind.Class
	)
	completions:push(primitive_type_stringbuilder)

  local primitive_type_record = create_completion("", "record", "record", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_record)

  local primitive_type_enum = create_completion("", "enum", "enum", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_enum)

  local primitive_type_union = create_completion("", "union", "union", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_union)

  local primitive_type_pointer = create_completion("", "pointer", "pointer", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_pointer)
	
  local primitive_type_func = create_completion("", "function", "function($1): $2", InsertTextFormat.Snippet, CompletionItemKind.Class)
	completions:push(primitive_type_func)

  local primitive_type_span = create_completion("", "span", "span(${1:type})", InsertTextFormat.Snippet, CompletionItemKind.Class)
	completions:push(primitive_type_span)

  local primitive_type_void = create_completion("", "void", "void", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_void)

  local primitive_type_type = create_completion("", "type", "type", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_type)

  local primitive_type_varargs = create_completion("", "varargs", "varargs", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_varargs)

  local primitive_type_io = create_completion("", "io", "io", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_io)

  local primitive_type_filestream = create_completion("", "filestream", "filestream", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_filestream)

  local primitive_type_math = create_completion("", "math", "math", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_math)

  local primitive_type_memory = create_completion("", "memory", "memory", InsertTextFormat.PlainText, CompletionItemKind.Class)
	completions:push(primitive_type_memory)
---------------------------------------

---------- Builtin functions ----------
  local builtin_func_require = create_completion([[
```nelua
global function require(modname: string <comptime>)
```
Loads the given module `modname`.

The function starts by looking into loaded modules to determine whether `modname` is already loaded. If it is then require does nothing, otherwise it tries to load the module.

If there is any error loading the module, then the compilation fails. If there is any error running the module, then the application terminates.
]], "require(modname)", "require", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_require)

  local builtin_func_print = create_completion([[
```nelua
global function print(...: varargs): void
```

Receives any number of arguments and prints their values to the standard output, converting each argument to a string following the same rules of `tostring`. The values are separated by tabs and a new line is always appended.

The function `print` is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use `io.write` or `io.writef`.
panic
]], "print(...)", "print", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_print)

  local builtin_func_panic = create_completion([[
```nelua
global function panic(message: string): void
```

Terminate the application abnormally with message `message`. This function never returns.

Use to raise unrecoverable errors.
]], "panic(message)", "panic", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_panic)

  local builtin_func_error = create_completion([[
```nelua
global function error(message: string): void
```

Raises an error with message `message`. This function never returns.

Currently this is an alias to `panic` and terminates the application, but in the future, in case the language get an exception system, it may be changed to an exception being thrown.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by enabling the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "error(message)", "error", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_error)

  local builtin_func_assert = create_completion([[
```nelua
global function assert(v: auto, message: facultative(string))
```

Raises an error if the value `v` is evaluated to `false`, otherwise, returns `v`. In case of error, `message` is the error message, when absent defaults to `"assertion failed!"`.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by using the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "assert(v, message)", "assert", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_assert)

  local builtin_func_check = create_completion([[
```nelua
global function check(cond: boolean, message: facultative(string)): void
```

If `cond` is true it does nothing, otherwise raises an error with `message` and terminates the application. Similar to `assert` however it’s completely omitted when compiling in release mode or with pragma `nochecks`. Use for assertive programming, to check if conditions are met without impacting performance of production code.

Remarks: Error messages are dependent on the host environment the program is being compiled in, it may include terminal color codes and path to host machine files to make debugging error locations easier. You can disable this behavior by using the pragma `noerrorloc`, it will make the program error messages reproducible when building across different host machines.
]], "check(cond, message)", "check", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_check)

  local builtin_func_likely = create_completion([[
```nelua
global function likely(cond: boolean): boolean
```

Returns `cond`. This is a branching prediction utility, expecting `cond` to evaluate to `true`.
]], "likely(cond)", "likely", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_likely)

  local builtin_func_unlikely = create_completion([[
```nelua
global function unlikely(cond: boolean): boolean
```

Returns `cond`. This is a branching prediction utility, expecting `cond` to evaluate to `false`.
]], "unlikely(cond)", "unlikely", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_unlikely)

  local builtin_func_ipairs = create_completion([[
```nelua
global function ipairs(a: container_reference_concept): (auto, auto, integer)
```

Returns values so that the construction

```nelua
for i,v in ipairs(a) do body end
```

will iterate over the index–value pairs of `a` from its first element up to the last. Where `i` is an integer determining the index of the element, and `v` its respective value.

The container `a` must be contiguous, such as `array`, `span`, `vector` or `sequence`.
]], "ipairs(a)", "ipairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_ipairs)

  local builtin_func_mipairs = create_completion([[
```nelua
global function mipairs(a: container_reference_concept): (auto, auto, integer)
```

Like `ipairs` but yields reference to elements values so that you can modify them in-place.
]], "mipairs(a)", "mipairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mipairs)

  local builtin_func_next = create_completion([[
```nelua
global function next(a: container_reference_concept, k: auto): (auto, auto, auto)
```

Gets the next element after key `k` for the container `a`.

In case of success returns `true` plus the next element key and the next element value. Otherwise returns `false` plus a zeroed key and value.

The container `a` must either have the metamethod `__next` or be a contiguous.
]], "next(a, k)", "next", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_next)

  local builtin_func_mnext = create_completion([[
```nelua
global function mnext(a: container_reference_concept, k: auto): (auto, auto, auto)
```

Like `next` but returns reference to the next element value, so that you can modify it in-place.
]], "mnext(a, k)", "mnext", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mnext)

  local builtin_func_pairs = create_completion([[
```nelua
global function pairs(a: container_reference_concept): (auto, auto, auto)
```

Returns values so that the construction

```nelua
for k,v in pairs(a) do body end
```

will iterate over all the key–value pairs of `a`. Where `k` is a key determining the location of the element, and `v` its respective value.

The container `a` must either have the metamethod `__pairs` or be a contiguous. Should work on any container, such as `array`, `span`, `vector`, `sequence` or `hashmap`.
]], "pairs(a)", "pairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_pairs)

  local builtin_func_mpairs = create_completion([[
```nelua
global function mpairs(a: container_reference_concept): (auto, auto, auto)
```

Like `pairs` but yields reference to elements values so that you can modify them in-place.
]], "mpairs(a)", "mpairs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_mpairs)

  local builtin_func_select = create_completion([[
```nelua
global function select(index: auto <comptime>, ...: varargs)
```

If `index` is a number, returns all arguments after argument number index; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string ‘#’, and select returns the total number of extra arguments it received.
]], "select(a, k)", "select", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(builtin_func_select)
---------------------------------------

----------------- Io ------------------
  local io_stderr = create_completion([[
```nelua
global io.stderr: filestream
```

Default error output file handle.
]], "io.stderr", "io.stderr", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stderr)

  local io_stdout = create_completion([[
```nelua
global io.stdout: filestream
```

Default output file handle.
]], "io.stdout", "io.stdout", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stdout)

  local io_stdin = create_completion([[
```nelua
global io.stdin: filestream
```

Default input file handle.
]], "io.stdin", "io.stdin", InsertTextFormat.PlainText, CompletionItemKind.Field)
	completions:push(io_stdin)

  local io_open = create_completion([[
```nelua
function io.open(filename: string, mode: facultative(string)) : (filestream, string, integer)
```

Opens a file, in the `mode` specified in the string mode. In case of success, it returns an open file.

Equivalent to `filestream:open(filename, mode)`.
]], "io.open(filename, mode?)", "io.open", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_open)

  local io_popen = create_completion([[
```nelua
function io.popen(prog: string, mode: facultative(string)) : (filestream, string, integer)
```

Starts the program `prog` in a separated process and returns a file handle that you can use to read data from this program (if `mode` is “r”, the default) or to write data to this program (if `mode` is “w”). This function is system dependent and is not available on all platforms.
]], "io.popen(prog, mode?)", "io.popen", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_popen)

  local io_close = create_completion([[
```nelua
function io.close(file: facultative(filestream)): (boolean, string, integer)
```

Closes a `file`. Without a file, closes the default output file.

Equivalent to `file:close()`.
]], "io.close(file?)", "io.close", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_close)

  local io_flush = create_completion([[
```nelua
function io.flush(file: facultative(filestream)): (boolean, string, integer)
```

flushs a `file`. Without a file, flushs the default output file.

Equivalent to `file:flush()`.
]], "io.flush(file?)", "io.flush", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_flush)

  local io_input = create_completion([[
```nelua
function io.input(file: overload(string,filestream,niltype)): filestream
```

When called with a file name, it opens the named `file` (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without arguments, it returns the current default input file.

In case of errors this function raises the error, instead of returning an error code.
]], "io.input(file?)", "io.input", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_input)

  local io_output = create_completion([[
```nelua
function io.output(file: overload(string,filestream,niltype)): filestream
```

Similar to io.input, but operates over the default output file.
]], "io.output(file?)", "io.output", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_output)

  local io_tmpfile = create_completion([[
```nelua
function io.tmpfile(): (filestream, string, integer)
```

In case of success, returns an open handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.
]], "io.tmpfile()", "io.tmpfile", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_tmpfile)

  local io_read = create_completion([[
```nelua
function io.read(fmt: overload(integer,string,niltype)): (string, string, integer)
```

Read from default input, according to the given format.

Equivalent to `io.input():read(fmt)`.
]], "io.read(fmt?)", "io.read", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_read)

  local io_write = create_completion([[
```nelua
function io.write(...: varargs): (boolean, string, integer)
```

Writes the value of each of its arguments to the standard output. The arguments must be strings or numbers. In case of success, this function returns `true`.

Equivalent to `io.output():write(...)`.
]], "io.write(...)", "io.write", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_write)

  local io_writef = create_completion([[
```nelua
function io.writef(fmt: string, ...: varargs): (boolean, string, integer)
```

Writes formatted values to the standard output, according to the given format. In case of success, this function returns `true`.

Equivalent to `io.output():writef(fmt, ...)`.
]], "io.writef(fmt, ...)", "io.writef", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_writef)

  local io_writef = create_completion([[
```nelua
function io.writef(fmt: string, ...: varargs): (boolean, string, integer)
```

Writes formatted values to the standard output, according to the given format. In case of success, this function returns `true`.

Equivalent to `io.output():writef(fmt, ...)`.
]], "io.writef(fmt, ...)", "io.writef", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_writef)

  local io_printf = create_completion([[
```nelua
function io.printf(...: varargs): void
```

Like io.writef but also flushes the standard output.
]], "io.printf(...)", "io.printf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_printf)

  local io_print = create_completion([[
```nelua
function io.print(...: varargs): void
```

Like print, but writes to io.stdout using io.write.
]], "io.print(...)", "io.print", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_print)

  local io_type = create_completion([[
```nelua
function io.type(obj: auto): auto
```

Checks whether `obj` is a valid file handle. Returns the string `"file"` if `obj` is an open file handle, `"closed file"` if `obj` is a closed file handle, or `nil` if `obj` is not a file handle.
]], "io.type(obj)", "io.type", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_type)

  local io_lines = create_completion([[
```nelua
function io.lines(filename: facultative(string), fmt: overload(integer,string,niltype))
```

Opens the given file name in read mode and returns an iterator function that works like `file:lines(...)` over the opened file.

The call `io.lines()` (with no file name) is equivalent to `io.input():lines("l")`, that is, it iterates over the lines of the default input file.

It currently never closes the file when the iteration finishes. In case of errors opening the file, this function raises the error, instead of returning an error code.
]], "io.lines(filename?, fmt?)", "io.lines", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(io_lines)
---------------------------------------

------------- Filestream --------------
  local filestream_fromfp = create_completion([[
```nelua
function filestream._fromfp(fp: *FILE, closef: function(fp: *FILE): cint): filestream
```

Initialize a new `filestream` from a given C `FILE` pointer. `closef` is a callback to call when closing the file handle.

This function is used internally.
]], "filestream._fromfp(fp, closef)", "filestream._fromfp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_fromfp)

  local filestream_getfp = create_completion([[
```nelua
function filestream._getfp(fs: filestream): *FILE
```

Returns a C `FILE` pointer for the filestream. In case the file is closed, returns `nilptr`.

This function is used internally
]], "filestream._getfp(fs)", "filestream._getfp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_getfp)

  local filestream_open = create_completion([[
```nelua
function filestream.open(filename: string, mode: facultative(string)) : (filestream, string, integer)
```

Opens a file, in the mode specified in the string `mode`. In case of success, it returns an open file. Otherwise, returns a closed file handle, plus an error message and a system-dependent error code.

The mode string can be any of the following:

  - `"r"`: read mode (the default);
  - `"w"`: write mode;
  - `"a"`: append mode;
  - `"r+"`: update mode, all previous data is preserved;
  - `"w+"`: update mode, all previous data is erased;
  - `"a+"`: append update mode, previous data is preserved, writing is only allowed at the end of file.

The mode string can also have a ‘b’ at the end, which is needed in some systems to open the file in binary mode.
]], "filestream._open(filename, mode?)", "filestream._open", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_open)

  local filestream_flush = create_completion([[
```nelua
function filestream.flush(fs: filestream): (boolean, string, integer)
```

Saves any written data to file.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]], "filestream.flush(fs)", "filestream.flush", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_flush)

  local filestream_close = create_completion([[
```nelua
function filestream.close(fs: filestream): (boolean, string, integer)
```

Closes the file.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]], "filestream.close(fs)", "filestream.close", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_close)

  local filestream_destroy = create_completion([[
```nelua
function filestream.destroy(fs: filestream): void
```

Destroys a file stream freeing its memory. If the file still open, it’s silently closed.

This function is only needed to be called when not using the GC
]], "filestream.destroy(fs)", "filestream.destroy", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_destroy)

  local filestream___close = create_completion([[
```nelua
function filestream.__close(fs: filestream): void
```

Effectively the same as `destroy`, called when a to-be-closed variable goes out of scope.
]], "filestream.__close(fs)", "filestream.__close", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream___close)

  local filestream_seek = create_completion([[
```nelua
function filestream.seek(fs: filestream, whence: facultative(string), offset: facultative(integer)): (integer, string, integer)
```

Sets and gets the file position, measured from the beginning of the file, to the position given by `offset` plus a base specified by the string `whence`, as follows:

  - `"set"`: base is position 0 (beginning of the file)
  - `"cur"`: base is current position
  - `"end"`: base is end of file

In case of success, returns the final file position, measured in bytes from the beginning of the file. If seek fails, it returns `-1`, plus an error message and a system-dependent error code.

The default value for whence is `"cur"`, and for offset is `0`. Therefore, the call `filestream:seek()` returns the current file position, without changing it.

The call `filestream:seek("set")` sets the position to the beginning of the file (and returns `0`). The call `filestream:seek("end")` sets the position to the end of the file, and returns its size.
]], "filestream.seek(fs, whence?, offset?)", "filestream.seek", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_seek)

  local filestream_setvbuf = create_completion([[
```nelua
function filestream.setvbuf(fs: filestream, mode: string, size: facultative(integer)): (boolean, string, integer)
```

Sets the buffering mode for a file. There are three available modes:

  - `"no"`: no buffering.
  - `"full"`: full buffering.
  - `"line"`: line buffering.

For the last two cases, size is a hint for the size of the buffer, in bytes. The default is an appropriate size.

The specific behavior of each mode is non portable, check the underlying ISO C function `setvbuf` in your platform for more details.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]], "filestream.setvbuf(fs, mode, size?)", "filestream.setvbuf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_setvbuf)

  local filestream_read = create_completion([[
```nelua
function filestream.read(fs: filestream, fmt: overload(integer,string,niltype)): (string, string, integer)
```

Reads the file file, according to the given formats, which specify what to read.

The function returns a string with the characters read. Otherwise, if it cannot read data with the specified format, it returns an empty string plus an error message and a system-dependent error code.

The available formats are:

  - `"a"`: reads the whole file, starting at the current position. On end of file, it returns the empty string, this format never fails.
  - `"l"`: reads the next line skipping the end of line, returning fail on end of file.
  - `"L"`: reads the next line keeping the end-of-line character (if present), returning fail on end of file.
  - `integer`: reads a string with up to this number of bytes, returning fail on end of file. If number is zero, it reads nothing and returns an empty string, or fail on end of file.

The formats `"l"` and `"L"` should be used only for text files. When called without arguments, it uses the default format `"l"` that reads the next line.
]], "filestream.read(fs, fmt?)", "filestream.read", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_read)

  local filestream_write = create_completion([[
```nelua
function filestream.write(fs: filestream, ...: varargs): (boolean, string, integer)
```

Writes values to the file. The arguments must be strings or convertible to string.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]], "filestream.write(fs, ...)", "filestream.write", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_write)

  local filestream_writef = create_completion([[
```nelua
function filestream.writef(fs: filestream, fmt: string, ...: varargs): (boolean, string, integer)
```

Writefs values to the file. The arguments must be strings or convertible to string.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]], "filestream.writef(fs, fmt, ...)", "filestream.writef", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_writef)

  local filestream_printf = create_completion([[
```nelua
function filestream.printf(fs: filestream, ...: varargs): void
```

Like `filestream:writef` but also flushes the standard output.
]], "filestream.printf(fs, ...)", "filestream.printf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_printf)

  local filestream_print = create_completion([[
```nelua
function filestream.print(fs: filestream, ...: varargs): void
```

Like print, but writes to a filestream.
]], "filestream.print(fs, ...)", "filestream.print", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_print)

  local filestream_lines = create_completion([[
```nelua
function filestream.lines(fs: filestream, fmt: overload(integer,string,niltype)): (auto, auto, string)
```

Returns an iterator function that, each time it is called, reads the file according to the given format. When no format is given, uses `"l"` as a default. As an example, the construction

```nelua
for c in filestream:lines(1) do body end
```

will iterate over all characters of the file, starting at the current position.
]], "filestream.lines(fs, fmt?)", "filestream.lines", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_lines)

  local filestream_isopen = create_completion([[
```nelua
function filestream.isopen(fs: filestream): boolean
```

Checks whether the file is open.
]], "filestream.isopen(fs)", "filestream.isopen", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream_isopen)

  local filestream___tostring = create_completion([[
```nelua
function filestream.__tostring(fs: filestream): string
```

Convert the file handle to a string. Returns "filed (closed)" for invalid or closed files, and "file (some address)" for open files.

This metamethod is used by tostring.
]], "filestream.__tostring(fs)", "filestream.__tostring", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(filestream___tostring)
---------------------------------------

---------------- Math -----------------
  local math_abs = create_completion([[
```nelua
function math.abs(x: an_scalar): auto
```

Returns the absolute value of x, that is, the maximum value between x and -x.

The argument type is always preserved.
]], "math.abs(x)", "math.abs", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_abs)

  local math_floor = create_completion([[
```nelua
function math.floor(x: an_scalar): auto
```

Returns the largest integral value less than or equal to x.
]], "math.floor(x)", "math.floor", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_floor)

  local math_ifloor = create_completion([[
```nelua
function math.ifloor(x: an_scalar): auto
```

Like `math.floor`, but the result is always converted to an integer.
]], "math.ifloor(x)", "math.ifloor", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_ifloor)

  local math_ceil = create_completion([[
```nelua
function math.ceil(x: an_scalar): auto
```

Returns the smallest integral value greater than or equal to x.
]], "math.ceil(x)", "math.ceil", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_ceil)

  local math_iceil = create_completion([[
```nelua
function math.iceil(x: an_scalar): auto
```

Like `math.ceil`, but the result is always converted to an integer.
]], "math.iceil(x)", "math.iceil", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_iceil)

  local math_round = create_completion([[
```nelua
function math.round(x: an_scalar): auto
```

Returns the rounded value of x towards the nearest integer. Halfway cases are rounded away from zero.
]], "math.round(x)", "math.round", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_round)

  local math_iround = create_completion([[
```nelua
function math.iround(x: an_scalar): auto
```

Like `math.round`, but the result is always converted to an integer.
]], "math.iround(x)", "math.iround", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_iround)

  local math_iround = create_completion([[
```nelua
function math.iround(x: an_scalar): auto
```

Like `math.round`, but the result is always converted to an integer.
]], "math.iround(x)", "math.iround", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_iround)

  local math_trunc = create_completion([[
```nelua
function math.trunc(x: an_scalar): auto
```

Returns the rounded value of x towards zero.
]], "math.trunc(x)", "math.trunc", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_trunc)

  local math_itrunc = create_completion([[
```nelua
function math.itrunc(x: an_scalar): auto
```

Like `math.trunc`, but the result is always converted to an integer.
]], "math.itrunc(x)", "math.itrunc", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_itrunc)

  local math_sqrt = create_completion([[
```nelua
function math.sqrt(x: an_scalar): auto
```

Returns the square root of `x`. You can also use the expression `x^0.5` to compute this value.
]], "math.sqrt(x)", "math.sqrt", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_sqrt)

  local math_cbrt = create_completion([[
```nelua
function math.cbrt(x: an_scalar): auto
```

Returns the cubic root of x. You can also use the expression x^(1/3) to compute this value.
]], "math.cbrt(x)", "math.cbrt", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_cbrt)

  local math_exp = create_completion([[
```nelua
function math.exp(x: an_scalar): auto
```

Returns the value of `e^x` (where `e` is the base of natural logarithms).
]], "math.exp(x)", "math.exp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_exp)

  local math_exp2 = create_completion([[
```nelua
function math.exp2(x: an_scalar): auto
```

Returns the value of 2^x. You can also use the expression 2^x to compute this value.
]], "math.exp2(x)", "math.exp2", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_exp2)

  local math_pow = create_completion([[
```nelua
function math.pow(x: an_scalar, y: an_scalar): auto
```

Returns `x^y`. You can also use the expression `x^y` to compute this value.
]], "math.pow(x,y)", "math.pow", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_pow)

  local math_log = create_completion([[
```nelua
function math.log(x: an_scalar, base: an_optional_scalar): auto
```

Returns the logarithm of `x` in the given base. The default for `base` is *e*, so that the function returns the natural logarithm of `x`.
]], "math.log(x,base)", "math.log", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_log)

  local math_cos = create_completion([[
```nelua
function math.cos(x: an_scalar): auto
```

Returns the cosine of `x` (assumed to be in radians).
]], "math.cos(x)", "math.cos", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_cos)

  local math_sin = create_completion([[
```nelua
function math.sin(x: an_scalar): auto
```

Returns the sine of `x` (assumed to be in radians).
]], "math.sin(x)", "math.sin", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_sin)

  local math_tan = create_completion([[
```nelua
function math.tan(x: an_scalar): auto
```

Returns the tangent of `x` (assumed to be in radians).
]], "math.tan(x)", "math.tan", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_tan)

  local math_acos = create_completion([[
```nelua
function math.acos(x: an_scalar): auto
```

Returns the arc cosine of `x` (in radians).
]], "math.acos(x)", "math.acos", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_acos)

  local math_asin = create_completion([[
```nelua
function math.asin(x: an_scalar): auto
```

Returns the arc sine of `x` (in radians).
]], "math.asin(x)", "math.asin", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_asin)

  local math_atan = create_completion([[
```nelua
function math.atan(y: an_scalar, x: an_optional_scalar): auto
```

Returns the arc tangent of `y/x` (in radians), but uses the signs of both arguments to find the quadrant of the result. It also handles correctly the case of `x` being zero.

The default value for `x` is `1`, so that the call `math.atan(y)` returns the arc tangent of `y`.
]], "math.atan(y,x)", "math.atan", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_atan)

  local math_atan2 = create_completion([[
```nelua
function math.atan2(y: an_scalar, x: an_optional_scalar): auto
```

Returns the arc tangent of `y/x` (in radians), but uses the signs of both arguments to find the quadrant of the result. It also handles correctly the case of `x` being zero.
]], "math.atan2(y,x)", "math.atan2", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_atan2)

  local math_cosh = create_completion([[
```nelua
function math.cosh(x: an_scalar): auto
```

Returns the hyperbolic cosine of `x`.
]], "math.cosh(x)", "math.cosh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_cosh)

  local math_sinh = create_completion([[
```nelua
function math.sinh(x: an_scalar): auto
```

Returns the hyperbolic sine of `x`.
]], "math.sinh(x)", "math.sinh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_sinh)

  local math_tanh = create_completion([[
```nelua
function math.tanh(x: an_scalar): auto
```

Returns the hyperbolic tangent of `x`.
]], "math.tanh(x)", "math.tanh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_tanh)

  local math_log10 = create_completion([[
```nelua
function math.log10(x: an_scalar): auto
```

Returns the base-10 logarithm of `x`
]], "math.log10(x)", "math.log10", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_log10)

  local math_log2 = create_completion([[
```nelua
function math.log2(x: an_scalar): auto
```

Returns the base-2 logarithm of `x`
]], "math.log2(x)", "math.log2", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_log2)

  local math_acosh = create_completion([[
```nelua
function math.acosh(x: an_scalar): auto
```

Returns the inverse hyperbolic cosine of `x`
]], "math.acosh(x)", "math.acosh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_acosh)

  local math_asinh = create_completion([[
```nelua
function math.asinh(x: an_scalar): auto
```

Returns the inverse hyperbolic sine of `x`
]], "math.asinh(x)", "math.asinh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_asinh)

  local math_atanh = create_completion([[
```nelua
function math.atanh(x: an_scalar): auto
```

Returns the inverse hyperbolic tangent of `x`
]], "math.atanh(x)", "math.atanh", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_atanh)

  local math_deg = create_completion([[
```nelua
function math.deg(x: an_scalar): auto
```

Converts the angle `x` from radians to degrees.
]], "math.deg(x)", "math.deg", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_deg)

  local math_rad = create_completion([[
```nelua
function math.rad(x: an_scalar): auto
```

Converts the angle `x` from degrees to radians.
]], "math.rad(x)", "math.rad", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_rad)

  local math_sign = create_completion([[
```nelua
function math.sign(x: an_scalar): auto
```

Returns the sign of `x`, that is:

  - `-1 if x < 0`
  - `0 if x == 0`
  - `1 if x > 0`

]], "math.sign(x)", "math.sign", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_sign)

  local math_fract = create_completion([[
```nelua
function math.fract(x: an_scalar): auto
```

Returns the fractional part of `x`.

Computed as `x - math.floor(x)`.
]], "math.fract(x)", "math.fract", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_fract)

  local math_mod = create_completion([[
```nelua
function math.mod(x: an_scalar, y: an_scalar): auto
```

Returns the modulo operation of `x` by `y`, rounded towards minus infinity.

This is equivalent to `x % y`, but faster and subject to rounding errors. It’s computed as `x - math.floor(x / y) * y`.
]], "math.mod(x,y)", "math.mod", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_mod)

  local math_modf = create_completion([[
```nelua
function math.modf(x: an_scalar): (auto, auto)
```

Returns the integral part of `x` and the fractional part of `x`. Its second result is always a float.
]], "math.modf(x)", "math.modf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_modf)

  local math_fmod = create_completion([[
```nelua
function math.fmod(x: an_scalar, y: an_scalar): auto
```

Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero. The result can either be an integer or a float depending on the arguments.
]], "math.fmod(x,y)", "math.fmod", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_fmod)

  local math_frexp = create_completion([[
```nelua
function math.frexp(x: an_scalar): (auto, int32)
```

Returns `m` and `e` such that `x = m*(2^e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) or zero (when `x` is zero).
]], "math.frexp(x)", "math.frexp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_frexp)

  local math_ldexp = create_completion([[
```nelua
function math.ldexp(m: an_scalar, e: int32): auto
```

Returns `m*(2^e)`, that is, `m` multiplied by an integral power of 2.
]], "math.ldexp(m,e)", "math.ldexp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_ldexp)

  local math_ldexp = create_completion([[
```nelua
function math.ldexp(m: an_scalar, e: int32): auto
```

Returns `m*(2^e)`, that is, `m` multiplied by an integral power of 2.
]], "math.ldexp(m,e)", "math.ldexp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_ldexp)

  local math_max = create_completion([[
```nelua
function math.max(...: varargs): auto
```

Returns the argument with the maximum value, according to the operator `<`.
]], "math.max(...)", "math.max", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_max)

  local math_clamp = create_completion([[
```nelua
function math.clamp(x: an_scalar, min: an_scalar, max: an_scalar): auto
```

Returns the value of `x` clamped between `min` and `max`.
]], "math.clamp(x,min,max)", "math.clamp", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_clamp)

  local math_ult = create_completion([[
```nelua
function math.ult(m: an_scalar, n: an_scalar): boolean
```

Returns a boolean, `true` if and only if integer `m` is below integer `n` when they are compared as unsigned integers.
]], "math.ult(m,n)", "math.ult", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_ult)

  local math_tointeger = create_completion([[
```nelua
function math.tointeger(x: an_scalar): auto
```

If the value x is convertible to an integer, returns that integer. Otherwise, returns nil.
]], "math.tointeger(x)", "math.tointeger", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_tointeger)

  local math_type = create_completion([[
```nelua
function math.type(x: an_scalar): auto
```

Returns `"integer"` if `x` is an integer, `“float”` if `x` is a float, or fail if `x` is not a number.
]], "math.type(x)", "math.type", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_type)

  local math_randomseed = create_completion([[
```nelua
function math.randomseed(x: an_optional_integral, y: an_optional_integral): (integer, integer)
```

When called with at least one argument, the integer parameters `x` and `y` are joined into a 128-bit seed that is used to reinitialize the pseudo-random generator. Equal seeds produce equal sequences of numbers. The default for y is zero.

When called with no arguments, generates a seed with a weak attempt for randomness.

This function returns the two seed components that were effectively used, so that setting them again repeats the sequence.

To ensure a required level of randomness to the initial state (or contrarily, to have a deterministic sequence, for instance when debugging a program), you should call `math.randomseed` with explicit arguments.
]], "math.randomseed(x,y)", "math.randomseed", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_randomseed)

  local math_random = create_completion([[
```nelua
function math.random(m: an_optional_scalar, n: an_optional_scalar): auto
```

When called without arguments, returns a pseudo-random float with uniform distribution in the range [`0`,`1`). When called with two integers `m` and `n`, returns a pseudo-random integer with uniform distribution in the range [`m`, `n`].

The call `math.random(n)`, for a positive n, is equivalent to `math.random(1,n)`. The call `math.random(0)` produces an integer with all bits (pseudo)random.

This function uses an algorithm based on xoshiro256 to produce pseudo-random 64-bit integers, which are the results of calls with argument 0. Other results (ranges and floats) are unbiased extracted from these integers.

Its pseudo-random generator is initialized with the equivalent of a call to `math.randomseed` with no arguments, so that `math.random` should generate different sequences of results each time the program runs.
]], "math.random(m,n)", "math.random", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_random)

  local math_isnan = create_completion([[
```nelua
function math.isnan(x: an_scalar): boolean
```

Returns true if value x is a NaN (not a number) floating point number.
]], "math.isnan(x)", "math.isnan", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_isnan)

  local math_isinf = create_completion([[
```nelua
function math.isinf(x: an_scalar): boolean
```

Returns true if value `x` is an infinite floating point number.
]], "math.isinf(x)", "math.isinf", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_isinf)

  local math_isfinite = create_completion([[
```nelua
function math.isfinite(x: an_scalar): boolean
```

Returns true if value `x` is a finite floating point number (neither NaN or Inf).
]], "math.isfinite(x)", "math.isfinite", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(math_isfinite)

  local math_pi = create_completion([[
```nelua
global math.pi: number
```

Float value of PI.
]], "math.pi(x)", "math.pi", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(math_pi)

  local math_huge = create_completion([[
```nelua
global math.huge: number
```

Float value greater than any other numeric value (infinite).
]], "math.huge(x)", "math.huge", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(math_huge)

  local math_mininteger = create_completion([[
```nelua
global math.mininteger: number
```

An integer with the minimum value for an integer.
]], "math.mininteger(x)", "math.mininteger", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(math_mininteger)

  local math_maxinteger = create_completion([[
```nelua
global math.maxinteger: number
```

An integer with the maximum value for an integer.
]], "math.maxinteger(x)", "math.maxinteger", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(math_maxinteger)

  local math_maxuinteger = create_completion([[
```nelua
global math.maxuinteger: number
```

An integer with the maximum value for an unsigned integer.
]], "math.maxuinteger(x)", "math.maxuinteger", InsertTextFormat.PlainText, CompletionItemKind.Variable)
	completions:push(math_maxuinteger)
---------------------------------------

--------------- Memory ----------------
  local memory_copy = create_completion([[
```nelua
function memory.copy(dest: pointer, src: pointer, n: usize): void
```

Copies n bytes from memory pointed by src into memory pointed by dest. If n is zero, then nothing is done.

The memory region may not overlap, use memory.move in that case.
]], "memory.copy(dest,src,n)", "memory.copy", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_copy)

  local memory_move = create_completion([[
```nelua
function memory.move(dest: pointer, src: pointer, n: usize): void
```

Copies `n` bytes from memory pointed by `src` into memory pointed by `dest`. The memory region may overlap. If `n` is zero, then nothing is done.

If the memory region is guaranteed to not overlap, then you could use `memory.copy`.
]], "memory.move(dest,src,n)", "memory.move", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_move)

  local memory_set = create_completion([[
```nelua
function memory.set(dest: pointer, x: byte, n: usize): void
```

Fills first `n` bytes of the memory pointed by dest with the byte `x`. If `n` is zero, then nothing is done.
]], "memory.set(dest,x,n)", "memory.set", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_set)

  local memory_zero = create_completion([[
```nelua
function memory.zero(dest: pointer, n: usize): void
```

Fills first `n` bytes of the memory pointed by `dest` with zeros. If `n` is zero, then nothing is done.
]], "memory.zero(dest,n)", "memory.zero", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_zero)

  local memory_compare = create_completion([[
```nelua
function memory.compare(a: pointer, b: pointer, n: usize): int32
```

Compares the first `n` bytes of the memory areas pointed by `a` and `b`.

Returns an integer less than, equal to, or greater than zero if the first `n` bytes of `a` is found, respectively, to be less than, to match, or be greater than the first `n` bytes of `b`.

The sign is determined by the sign of the difference between the first pair of bytes that differ in `a` and `b`.

If n is zero, the return value is zero.
]], "memory.compare(a,b,n)", "memory.compare", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_compare)

  local memory_equals = create_completion([[
```nelua
function memory.equals(a: pointer, b: pointer, n: usize): boolean
```

Check if the first `n` bytes of the memory areas pointed by `a` and `b` are equal.

Returns `true` if the first `n` bytes of `a` is equal to the first `n` bytes of `b`.

If `n` is zero, the return value is `true`.
]], "memory.equals(a,b,n)", "memory.equals", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_equals)

  local memory_scan = create_completion([[
```nelua
function memory.scan(src: pointer, x: byte, n: usize): pointer
```

Scan first `n` bytes from memory pointed by `src` for the first instance of byte `x`.

Returns a pointer to the matching byte when found, otherwise `nilptr`.

If `n` is zero, the return value is `nilptr`.
]], "memory.scan(src,x,n)", "memory.scan", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_scan)

  local memory_find = create_completion([[
```nelua
function memory.find(haystack: pointer, haystacksize: usize, needle: pointer, needlesize: usize): pointer
```

Scan first `haystacksize` bytes from memory pointed by `haystack` for the first instance of the chunk of memory in the region determined by `needle` and `needlesize`.

Returns a pointer to the matching chunk when found, otherwise `nilptr`.
]], "memory.find(h,hs,n,ns)", "memory.find", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_find)

  local memory_spancopy = create_completion([[
```nelua
function memory.spancopy(dest: an_span, src: an_span): void
```

Like `memory.copy` but operate over spans.
]], "memory.spancopy(dest,src)", "memory.spancopy", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spancopy)

  local memory_spanmove = create_completion([[
```nelua
function memory.spanmove(dest: an_span, src: an_span): void
```

Like `memory.move` but operate over spans.
]], "memory.spanmove(dest,src)", "memory.spanmove", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spanmove)

  local memory_spanset = create_completion([[
```nelua
function memory.spanset(dest: an_span, x: auto): void
```

Like `memory.set` but operate over spans.
]], "memory.spanset(dest,x)", "memory.spanset", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spanset)

  local memory_spanzero = create_completion([[
```nelua
function memory.spanzero(dest: an_span): void
```

Like `memory.zero` but operate over spans.
]], "memory.spanzero(dest)", "memory.spanzero", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spanzero)

  local memory_spancompare = create_completion([[
```nelua
function memory.spancompare(a: an_span, b: an_span): int32
```

Like `memory.compare` but operate over spans.
]], "memory.spancompare(a,b)", "memory.spancompare", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spancompare)

  local memory_spanequals = create_completion([[
```nelua
function memory.spanequals(a: an_span, b: an_span): boolean
```

Like `memory.equals` but operate over spans.
]], "memory.spanequals(a,b)", "memory.spanequals", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spanequals)

  local memory_spanfind = create_completion([[
```nelua
function memory.spanfind(s: an_span, x: auto): isize
```

Scan span `s` for value `x` and returns its respective index. In case `x` is not found `-1` is returned.
]], "memory.spanfind(s,x)", "memory.spanfind", InsertTextFormat.PlainText, CompletionItemKind.Function)
	completions:push(memory_spanfind)
---------------------------------------

-------------- Snippets ---------------
  local snippet_if = create_completion("", "if .. then", "if $1 then\n\t\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_if)

  local snippet_elseif = create_completion("", "elseif .. then", "elseif $1 then", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_elseif)

  local snippet_while = create_completion("", "while .. do", "while $1 do\n\t\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_while)

  local snippet_do = create_completion("", "do .. end", "do \n\t$1\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_do)

  local snippet_switch = create_completion("", "switch .. end", "switch $1 do\n\t\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_switch)

  local snippet_case = create_completion("", "case .. then", "case $1 then", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_case)

  local snippet_defer = create_completion("", "defer .. end", "defer \n\t$1\nend", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_defer)

  local snippet_repeat = create_completion("", "repeat .. until", "repeat\n\t\nuntil $1", InsertTextFormat.Snippet, CompletionItemKind.Snippet)
	completions:push(snippet_repeat)

  local snippet_forin_generic = create_completion(
		"", 
		"for .. func", 
		"for ${1:value} in ${2:func()} do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_generic)

  local snippet_forin_pairs = create_completion(
		"", 
		"for .. pairs", 
		"for ${1:key}, ${2:value} in pairs(${3:a}) do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_pairs)

  local snippet_forin_mpairs = create_completion(
		"", 
		"for .. mpairs", 
		"for ${1:key}, ${2:value} in mpairs(${3:a}) do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_mpairs)

  local snippet_forin_ipairs = create_completion(
		"", 
		"for .. ipairs", 
		"for ${1:index}, ${2:value} in ipairs(${3:a}) do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_ipairs)

  local snippet_forin_mipairs = create_completion(
		"", 
		"for .. mipairs", 
		"for ${1:index}, ${2:value} in mipairs(${3:a}) do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forin_mipairs)

  local snippet_forn = create_completion(
		"", 
		"for i = ..", 
		"for ${1:i} = ${2:1}, ${3:10} do\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_forn)

	local snippet_localfunc = create_completion(
		"", 
		"local function", 
		"local function $1()\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_localfunc)

	local snippet_globalfunc = create_completion(
		"", 
		"global function", 
		"global function $1()\n\t\nend", 
		InsertTextFormat.Snippet, 
		CompletionItemKind.Snippet
	)
	completions:push(snippet_globalfunc)

---------------------------------------

------------ Generic Text -------------
	local identifiers: sequence(string)
	for _, doc  in pairs(documents) do
		for identifier in doc:gmatch("%f[%w_]([%w_]+)%f[^%w_]") do
			identifiers:push(identifier)
		end
  end

	local seen_identifiers: hashmap(string, boolean)
	local unique_identifiers: sequence(string)
	for _, identifier  in ipairs(identifiers) do
		if not seen_identifiers[identifier] and not keywords[identifier] then
			unique_identifiers:push(identifier)
			seen_identifiers[identifier] = true
		end
	end
	identifiers:destroy()
	seen_identifiers:destroy()

	for _, identifier in ipairs(unique_identifiers) do
		local text = create_completion("", identifier, identifier, InsertTextFormat.PlainText, CompletionItemKind.Text)
		completions:push(text)
	end
	unique_identifiers:destroy()
---------------------------------------

	local completion_response = response.completion(request_id, completions)
	io.write(completion_response)
	io.flush()
end

return completion
