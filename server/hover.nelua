require 'io'

require 'utils.logger'
require 'utils.response'

local function hover(
	documents: hashmap(string, string),
	request_id: integer,
	current_uri: string,
	current_file_path: string,
	current_file: string,
	current_line: integer,
	current_char: integer
)
	if documents:peek(current_uri) ~= nilptr then
		current_file = documents[current_uri]
	end

	local content: string

	local line_num = 0
	for line in current_file:gmatch("[^\n]-\n") do
		if line_num == current_line then
			local identifier_find_start: integer
			for identifier in line:gmatch("%f[%w_]([%w_]+)%f[^%w_]") do
				local identifier_matched, identifier_seq = line:match("%f[%w_]" .. identifier .. "%f[^%w_]")
				local identifier_start = line:find("%f[%w_]" .. identifier_seq[1] .. "%f[^%w_]", identifier_find_start) - 1
				identifier_find_start = identifier_start + #identifier
		        local identifier_end = identifier_start + #identifier_seq[1] - 1  
				if current_char >= identifier_start and current_char <= identifier_end then
					local ast_prog = io.popen("nelua --print-analyzed-ast " .. current_file_path)
					local ast_file = ast_prog:read("a")
					local ast_search_start = ast_file:find('%f[%w_]name%f[^%w_] = "%f[%w_]' .. identifier .. '%f[^%w_]"')
					if ast_search_start == 0 then
						ast_search_start = ast_file:find('%f[%w_]name%f[^%w_] = "%f[%w_][%w_]+%.' .. identifier .. '%f[^%w_]"')
					end
					logger.log(ast_search_start)
					logger.log(ast_file:sub(ast_search_start))
					local ast_type_start = ast_file:find('type = "', ast_search_start)
					local ast_type_matched, ast_type_seq = ast_file:match('type = "([^\"]+)",', ast_type_start)
					content = "type:\n```nelua\n" .. ast_type_seq[1] .. "\n```"
					ast_prog:close()
				end
			end
		end
		line_num = line_num + 1
	end
	::type_found::
	local hover_response = response.hover(request_id, content)
	io.write(hover_response)
	io.flush()
end

return hover
