require 'io'
require 'os'

require 'utils.response'

local create_tmp_file = require 'utils.create_tmp_file'

local Severity = @enum{
	error = 1,
	warning,
	information,
	hint
}

local Diagnostic = @record{
	severe: integer,
	path: string,
	line: integer,
	s_char: integer,
	e_char: integer,
	msg: string
}

local function create_diagnostic(analysis: string, analysis_match: string, severity: integer): Diagnostic
	local diagnostic: Diagnostic

	for line in analysis:gmatch("([^\r\n]+)") do
		local analysis_matched, analysis_seq = line:match(analysis_match)
		if analysis_matched then
			local analysis_search_start = analysis:find(analysis_match)
			local error_len_matched, error_len_seq = analysis:match("[~%^]+", analysis_search_start) 

			diagnostic.severe = severity
			diagnostic.path = analysis_seq[1]
			diagnostic.line = tointeger(analysis_seq[2]) - 1
			diagnostic.s_char = tointeger(analysis_seq[3]) - 1
			diagnostic.e_char = diagnostic.s_char + #error_len_seq[1]
			diagnostic.msg = analysis_seq[4]
			break
		end

		local extern_err_matched, extern_err_seq = line:match("(.-):(%d+):%s+error:%s+([^\r\n]+)")
		if extern_err_matched then 
			for l in analysis:gmatch("[^\r\n]+") do
				local extern_analysis_match: string = "(.-):(%d+):(%d+):%s*from:" 
				local analysis_matched, analysis_seq = l:match(extern_analysis_match)
				if analysis_matched then
					local analysis_search_start = analysis:find(extern_analysis_match)
					local error_len_matched, error_len_seq = analysis:match("[~%^]+", analysis_search_start) 
					diagnostic.severe = severity
					diagnostic.path = analysis_seq[1]
					diagnostic.line = tointeger(analysis_seq[2]) - 1
					diagnostic.s_char = tointeger(analysis_seq[3]) - 1
					diagnostic.e_char = diagnostic.s_char + #error_len_seq[1]
					diagnostic.msg = extern_err_seq[3]
					break
				end
			end
			break
		end

	end

	return diagnostic
end

local function diagnostic(current_file: string, current_file_path: string, current_uri: string, root_uri: string): boolean
	local err: boolean = true

	local add_paths = "./?.nelua;./?/init.nelua;/usr/local/lib/nelua/lib/?.nelua;/usr/local/lib/nelua/lib/?/init.nelua;"
	local current_file_dir: string

	local current_file_matched, current_file_seq = current_file_path:match("(.+/).+nelua")
	if current_file_matched then
		current_file_dir = root_uri .. "/" .. current_file_seq[1]
	else
		current_file_dir = root_uri
	end
	local add_file_path = root_uri .. "/?.nelua"
	local add_init_path = root_uri .. "/?/init.nelua"
	add_paths = add_paths .. add_file_path .. ";" .. add_init_path


	local tmp_file_name = create_tmp_file(current_file_path, current_file)
	local analysis = io.popen("(cd " .. current_file_dir .. "; cat " .. tmp_file_name .. " | nelua --path '" .. add_paths .. "' -a -) 2>&1"):read("a")
	logger.log(analysis)
	os.remove(tmp_file_name)

	if analysis:match(":%s*error:") then
		local diag: Diagnostic = create_diagnostic(analysis, "(.-):(%d+):(%d+):%s+error:%s+([^\r\n]+)", Severity.error)
		local diagnostic_response = response.diagnostic(current_uri, diag.line, diag.s_char, diag.e_char, diag.severe, diag.msg)
		io.write(diagnostic_response)
		io.flush()

		return err
	elseif analysis:match(":%s*syntax error:") then
		local diag: Diagnostic = create_diagnostic(analysis, "(.-):(%d+):(%d+):%s+syntax error:%s+([^\r\n]+)", Severity.error)
		local diagnostic_response = response.diagnostic(current_uri, diag.line, diag.s_char, diag.e_char, diag.severe, diag.msg)
		io.write(diagnostic_response)
		io.flush()

		return err
	end

	err = false
	local diagnostic_response = response.diagnostic(current_uri, 0, 0, 0, 0, "", true)
	io.write(diagnostic_response)
	io.flush()

	return err
end

return diagnostic
