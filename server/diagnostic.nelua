require 'io'
require 'os'

require 'utils.response'

local Severity = @enum{
	error = 1,
	warning,
	information,
	hint
}

local Diagnostic = @record{
	severe: integer,
	path: string,
	line: integer,
	s_char: integer,
	e_char: integer,
	msg: string
}

local function create_diagnostic(ast: string, ast_match: string, severity: integer): Diagnostic
	local diagnostic: Diagnostic

	for line in ast:gmatch("([^\r\n]+)") do
		local ast_matched, ast_seq = line:match(ast_match)
		if ast_matched then
			local ast_search_start = ast:find(ast_match)
			local error_len_matched, error_len_seq = ast:match("[~%^]+", ast_search_start) 

			diagnostic.severe = severity
			diagnostic.path = ast_seq[1]
			diagnostic.line = tointeger(ast_seq[2]) - 1
			diagnostic.s_char = tointeger(ast_seq[3]) - 1
			diagnostic.e_char = diagnostic.s_char + #error_len_seq[1]
			diagnostic.msg = ast_seq[4]
			break
		end

		local extern_err_matched, extern_err_seq = line:match("(.-):(%d+):%s+error:%s+([^\r\n]+)")
		if extern_err_matched then 
			for l in ast:gmatch("[^\r\n]+") do
				local extern_ast_match: string = "(.-):(%d+):(%d+):%s*from:" 
				local ast_matched, ast_seq = l:match(extern_ast_match)
				if ast_matched then
					local ast_search_start = ast:find(extern_ast_match)
					local error_len_matched, error_len_seq = ast:match("[~%^]+", ast_search_start) 
					diagnostic.severe = severity
					diagnostic.path = ast_seq[1]
					diagnostic.line = tointeger(ast_seq[2]) - 1
					diagnostic.s_char = tointeger(ast_seq[3]) - 1
					diagnostic.e_char = diagnostic.s_char + #error_len_seq[1]
					diagnostic.msg = extern_err_seq[3]
					break
				end
			end
			break
		end

	end

	return diagnostic
end

local function diagnostic(current_file: string, current_file_path: string, current_uri: string, root_uri: string): boolean
	local err: boolean = true

	local tmp_name = os.tmpname():gsub("/", "_")
	local _, current_file_name_seq = current_file_path:match("[^/]+%.nelua")
	local current_dir = current_file_path:sub(1, #current_file_path - #current_file_name_seq[1])
	local tmp_file_name = current_dir .. tmp_name .. "." .. current_file_path:gsub("/", ".")
	local tmp_file = io.open(tmp_file_name, "w")
	tmp_file:write(current_file)
	tmp_file:close()

	local analysis = io.popen("nelua -a " .. tmp_file_name .. " 2>&1"):read("a")
	if analysis:match(":%s+error:") then
		local diag: Diagnostic = create_diagnostic(analysis, "(.-):(%d+):(%d+):%s+error:%s+([^\r\n]+)", Severity.error)
		local diagnostic_response = response.diagnostic(current_uri, diag.line, diag.s_char, diag.e_char, diag.severe, diag.msg)
		io.write(diagnostic_response)
		io.flush()
	elseif analysis:match(":%s+syntax error:") then
		local diag: Diagnostic = create_diagnostic(analysis, "(.-):(%d+):(%d+):%s+syntax error:%s+([^\r\n]+)", Severity.error)
		local diagnostic_response = response.diagnostic(current_uri, diag.line, diag.s_char, diag.e_char, diag.severe, diag.msg)
		io.write(diagnostic_response)
		io.flush()
	else 
		err = false
		local diagnostic_response = response.diagnostic(current_uri, 0, 0, 0, 0, "", true)
		io.write(diagnostic_response)
		io.flush()
	end

	os.remove(tmp_file_name)
	return err
end

return diagnostic
